/*The function takes an array of heights, width and 
length as its 3 arguments where each index i value 
determines the height, width, length of the ith box. 
Here n is the total no of boxes.*/

struct box
{
    int h,w,l;
};

int compare (const void *a, const void * b)
{
    return ( (*(box *)b).l * (*(box *)b).w ) -
           ( (*(box *)a).l * (*(box *)a).w );
}


int maxHeight(int height[],int width[],int length[],int n)
{
    //Your code here
    box arr[3*n];
    int index=0;
    for(int i=0;i<n;i++)
    {
       arr[index].h=height[i];
       arr[index].w=min(width[i],length[i]);
       arr[index].l=max(length[i],width[i]);
       index++;
       
       arr[index].h=width[i];
       arr[index].w=min(height[i],length[i]);
       arr[index].l=max(height[i],length[i]);
       index++;
       
       arr[index].h=length[i];
       arr[index].w=min(width[i],height[i]);
       arr[index].l=max(width[i],height[i]);
       index++;
     }
     
     n=3*n;
     qsort(arr,n,sizeof(arr[0]),compare);
     
     int msh[n];
     for(int i=0;i<n;i++)
     {
        msh[i]=arr[i].h; 
     }
     for(int i=1;i<n;i++)
     {
         for(int j=0;j<i;j++)
         {
             if(arr[i].w<arr[j].w&&arr[i].l<arr[j].l&&msh[i]<msh[j]+arr[i].h)
               msh[i]=msh[j]+arr[i].h;
         }
     }
     
     int max=-1;
     for(int i=0;i<n;i++)
     {
         if(msh[i]>max)
         max=msh[i];
     }
     return max;
}
